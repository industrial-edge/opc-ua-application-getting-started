[
   {
      "id":"697662fa.f6378c",
      "type":"tab",
      "label":"OPC-UA",
      "disabled":false,
      "info":""
   },
   {
      "id":"315930f9.f44c9",
      "type":"group",
      "z":"697662fa.f6378c",
      "name":"",
      "style":{
         "fill":"#bfdbef",
         "label":true
      },
      "nodes":[
         "88727709.7991b8",
         "8a12832e.7b065",
         "2d07e65f.a11eea",
         "4c987d7.a281784"
      ],
      "x":134,
      "y":179,
      "w":852,
      "h":122
   },
   {
      "id":"4835363e.32b548",
      "type":"group",
      "z":"697662fa.f6378c",
      "name":"",
      "style":{
         "fill":"#e3f3d3",
         "label":true
      },
      "nodes":[
         "8a1a2571.71dd98",
         "55f8dfec.1c44b",
         "fd523445.63f038",
         "756577bc.2a2b78",
         "a9bf7e43.6733f"
      ],
      "x":134,
      "y":319,
      "w":852,
      "h":182
   },
   {
      "id":"6751a745.1161a8",
      "type":"group",
      "z":"697662fa.f6378c",
      "name":"",
      "style":{
         "stroke":"#a4a4a4",
         "label":true,
         "fill":"#ffefbf"
      },
      "nodes":[
         "2775c81a.da35e8",
         "4fc4fc20.9ec004",
         "88618ed4.bea63",
         "f43f348e.8c6598",
         "797ca005.442b2",
         "5de76388.e0ec6c",
         "4085c35c.51955c"
      ],
      "x":114,
      "y":519,
      "w":912,
      "h":182
   },
   {
      "id":"d6fe9150.27bee",
      "type":"group",
      "z":"697662fa.f6378c",
      "name":"",
      "style":{
         "fill":"#ffff00",
         "label":true,
         "stroke":"#000000"
      },
      "nodes":[
         "3fe9dbdb.0dbcd4",
         "95548cf8.f2114",
         "b2306431.689c68",
         "62eab68b.b9b0f8"
      ],
      "x":134,
      "y":19,
      "w":852,
      "h":142
   },
   {
      "id":"e60e8c14.57c3d",
      "type":"group",
      "z":"697662fa.f6378c",
      "name":"",
      "style":{
         "fill":"#dbcbe7",
         "label":true,
         "fill-opacity":"0.23"
      },
      "nodes":[
         "7b6db4f9.69247c",
         "e3744832.f1e3d8",
         "a21804fd.c39648",
         "b5b6c741.a0d3b8",
         "52f31d0c.92b8c4",
         "cda381df.c595a",
         "546d9b79.5e2594",
         "496a05a0.32a08c",
         "ea095553.9c90e8"
      ],
      "x":154,
      "y":759,
      "w":792,
      "h":302
   },
   {
      "id":"3fe9dbdb.0dbcd4",
      "type":"debug",
      "z":"697662fa.f6378c",
      "g":"d6fe9150.27bee",
      "name":"",
      "active":true,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"false",
      "statusVal":"",
      "statusType":"auto",
      "x":870,
      "y":120,
      "wires":[
         
      ]
   },
   {
      "id":"95548cf8.f2114",
      "type":"comment",
      "z":"697662fa.f6378c",
      "g":"d6fe9150.27bee",
      "name":"Get all tag names and IDs and put in global maps",
      "info":"",
      "x":520,
      "y":60,
      "wires":[
         
      ]
   },
   {
      "id":"b2306431.689c68",
      "type":"mqtt in",
      "z":"697662fa.f6378c",
      "g":"d6fe9150.27bee",
      "name":"",
      "topic":"ie/m/#",
      "qos":"2",
      "datatype":"json",
      "broker":"310e5351.87c53c",
      "x":210,
      "y":120,
      "wires":[
         [
            "62eab68b.b9b0f8"
         ]
      ]
   },
   {
      "id":"62eab68b.b9b0f8",
      "type":"function",
      "z":"697662fa.f6378c",
      "g":"d6fe9150.27bee",
      "name":"Parse Metadata",
      "func":"/*################################# \n    Init Variables\n#################################*/\nlet nameIDMap = global.get(\"NameIDMap\") || new Map();          //global only changed here\n//let connectionName = \"Tank\"; // Name of the connection\n\n\n/*################################# \n    Check Payload\n#################################*/\nlet m = msg.payload;\nif (m.seq == undefined) {\n    return null;\n} \n\n\n/*################################# \n    Parse payload and store name and id to the NameIDMap\n#################################*/    \n\n// Iterate through connections\nm.connections.forEach(connection => \n{\n    if ((connection.name != null)) {\n        let dataPoints = connection.dataPoints;\n\n        //  Iterate through dataPoints\n        dataPoints.forEach( dataPoint => {\n            let dataPointDefinitions = dataPoint.dataPointDefinitions;\n\n            // Iterate through dataPointDefinitions\n            dataPointDefinitions.forEach(dataPointDefinition => {\n                nameIDMap.set(dataPointDefinition.name, dataPointDefinition.id);\n\t\n            });\n        });\n    }\n});\n\n\n/*################################# \n    update flow maps\n#################################*/  \nglobal.set(\"NameIDMap\", nameIDMap);\n\n// for (let names of nameIDMap.keys()) { //nameIDMap.values()\n//   node.warn(names);\n// }\n\nreturn msg;\n\n\n",
      "outputs":1,
      "noerr":0,
      "initialize":"",
      "finalize":"",
      "x":540,
      "y":120,
      "wires":[
         [
            "3fe9dbdb.0dbcd4"
         ]
      ]
   },
   {
      "id":"7b6db4f9.69247c",
      "type":"inject",
      "z":"697662fa.f6378c",
      "g":"e60e8c14.57c3d",
      "name":"",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"",
      "payload":"$now()",
      "payloadType":"jsonata",
      "x":250,
      "y":960,
      "wires":[
         [
            "a21804fd.c39648"
         ]
      ]
   },
   {
      "id":"e3744832.f1e3d8",
      "type":"mqtt out",
      "z":"697662fa.f6378c",
      "g":"e60e8c14.57c3d",
      "name":"",
      "topic":"ie/d/j/simatic/v1/opcua1/dp/r/OPCUA/default",
      "qos":"",
      "retain":"",
      "broker":"310e5351.87c53c",
      "x":750,
      "y":960,
      "wires":[
         
      ]
   },
   {
      "id":"a21804fd.c39648",
      "type":"function",
      "z":"697662fa.f6378c",
      "g":"e60e8c14.57c3d",
      "name":"",
      "func":"let tagID = \"502\";\nlet tagValue = context.get(\"tagValue\") || 0;\nlet sequence = context.get(\"sequence\") || 0;\ntagValue = tagValue + 1;\nsequence = sequence + 1;\n\nmsg.payload = \n{\n    \"seq\": sequence,\n    \"vals\": [\n        {\n        \"id\": tagID,       //get the id to the variable name\n        \"qc\": 3,\n        \"ts\": msg.payload,\n        \"val\": tagValue\n        }\n    ]\n}\n\ncontext.set(\"tagValue\", tagValue);\ncontext.set(\"sequence\", sequence);\n\nreturn msg;",
      "outputs":1,
      "noerr":0,
      "initialize":"",
      "finalize":"",
      "x":420,
      "y":960,
      "wires":[
         [
            "b5b6c741.a0d3b8",
            "e3744832.f1e3d8"
         ]
      ]
   },
   {
      "id":"b5b6c741.a0d3b8",
      "type":"debug",
      "z":"697662fa.f6378c",
      "g":"e60e8c14.57c3d",
      "name":"",
      "active":true,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"false",
      "statusVal":"",
      "statusType":"auto",
      "x":650,
      "y":1020,
      "wires":[
         
      ]
   },
   {
      "id":"2775c81a.da35e8",
      "type":"complete",
      "z":"697662fa.f6378c",
      "g":"6751a745.1161a8",
      "name":"",
      "scope":[
         "2d07e65f.a11eea"
      ],
      "uncaught":false,
      "x":210,
      "y":600,
      "wires":[
         [
            "4fc4fc20.9ec004"
         ]
      ]
   },
   {
      "id":"4fc4fc20.9ec004",
      "type":"function",
      "z":"697662fa.f6378c",
      "g":"6751a745.1161a8",
      "name":"calculate KPI",
      "func":"/*################################# \n    Init Variables\n#################################*/\nlet nameIDMap = global.get(\"NameIDMap\");      //global defined in \"Name - ID zuordenen\"\nlet idValueMap = global.get(\"IDValueMap\");    //global defined in \"Name - ID zuordenen\", changed here with every message\nlet oldValues = global.get(\"oldValues\") || new Map();      //global defined in \"Name - ID zuordenen\", changed here when parameters changed\nlet timestampMap = global.get(\"IDTimestampMap\");\n\n//Variables for writing changes of the parameters to the form\nlet producedBottlesID = nameIDMap.get(\"ProducedBottles\"); \nlet faultyBottlesID = nameIDMap.get(\"FaultyBottles\"); \nlet productionQualityID = nameIDMap.get(\"ProductionQuality\");\n// node.warn(producedBottlesID);\n\nlet producedBottlesValue = idValueMap.get(producedBottlesID); \nlet faultyBottlesValue = idValueMap.get(faultyBottlesID);\nlet timestamp = timestampMap.get(producedBottlesID);\n// node.warn(producedBottlesValue);\n\n if(producedBottlesValue != oldValues.get(producedBottlesID)){\n    msg.payload  = timestamp;\n    msg.topic = \"ie/d/j/simatic/v1/opcua1/dp/r/OPCUA/default\";\n    oldValues.set(producedBottlesID,producedBottlesValue);\n    \n    if(faultyBottlesValue == 0){ \n        idValueMap.set(productionQualityID, 100);\n    }\n    else{\n        let qualityTmp = 100-(faultyBottlesValue/producedBottlesValue)*100;\n        // node.warn(qualityTmp);\n        idValueMap.set(productionQualityID, qualityTmp);\n    }\n    global.set(\"IDValueMap\", idValueMap);\n    global.set(\"oldValues\", oldValues);\n}\nelse msg = null;\n\n\n\nreturn msg;",
      "outputs":1,
      "noerr":0,
      "initialize":"",
      "finalize":"",
      "x":370,
      "y":600,
      "wires":[
         [
            "88618ed4.bea63",
            "797ca005.442b2"
         ]
      ]
   },
   {
      "id":"88618ed4.bea63",
      "type":"debug",
      "z":"697662fa.f6378c",
      "g":"6751a745.1161a8",
      "name":"",
      "active":false,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"false",
      "statusVal":"",
      "statusType":"auto",
      "x":550,
      "y":660,
      "wires":[
         
      ]
   },
   {
      "id":"cda381df.c595a",
      "type":"function",
      "z":"697662fa.f6378c",
      "g":"e60e8c14.57c3d",
      "name":"get all nameIDMap",
      "func":"let nameIDMap = global.get(\"IDValueMap\");   \n\n// let nameIDMap = global.get(\"NameIDMap\");      \nlet idValueMap = global.get(\"IDValueMap\") || new Map();  \n// let timestampMapObject = global.get(\"IDTimestampMap\") || new Map();\n\n\nfor (let names of nameIDMap.keys()) { //nameIDMap.values() //nameIDMap.keys()\n  node.warn(names);\n}\n\n// node.warn(idValueMap.get(nameIDMap.get(\"ProductionQuality\")));\n// return msg;",
      "outputs":1,
      "noerr":0,
      "initialize":"",
      "finalize":"",
      "x":670,
      "y":900,
      "wires":[
         [
            
         ]
      ]
   },
   {
      "id":"546d9b79.5e2594",
      "type":"inject",
      "z":"697662fa.f6378c",
      "g":"e60e8c14.57c3d",
      "name":"",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"",
      "payload":"",
      "payloadType":"date",
      "x":260,
      "y":900,
      "wires":[
         [
            "cda381df.c595a"
         ]
      ]
   },
   {
      "id":"f43f348e.8c6598",
      "type":"mqtt out",
      "z":"697662fa.f6378c",
      "g":"6751a745.1161a8",
      "name":"",
      "topic":"ie/d/j/simatic/v1/opcua1/dp/r/OPCUA/default",
      "qos":"",
      "retain":"false",
      "broker":"310e5351.87c53c",
      "x":830,
      "y":600,
      "wires":[
         
      ]
   },
   {
      "id":"797ca005.442b2",
      "type":"function",
      "z":"697662fa.f6378c",
      "g":"6751a745.1161a8",
      "name":"format KPI",
      "func":"/*################################# \n    Init Variables\n#################################*/\nlet nameIDMap = global.get(\"NameIDMap\");      //global defined in \"Name - ID zuordenen\"\nlet idValueMap = global.get(\"IDValueMap\");    //global defined in \"Name - ID zuordenen\", changed here with every message\n\nlet sequence = context.get(\"sequence\") || 0;\nsequence = sequence + 1;\n\nlet tagID = nameIDMap.get(\"ProductionQuality\");\nlet tagValue = idValueMap.get(tagID);\n\nmsg.payload = \n{\n    \"seq\": sequence,\n    \"vals\": [\n        {\n        \"id\": tagID,\n        \"qc\": 3,\n        \"ts\": msg.payload,\n        \"val\": tagValue\n        }\n    ]\n}\n\ncontext.set(\"sequence\", sequence);\nreturn msg;",
      "outputs":1,
      "noerr":0,
      "initialize":"",
      "finalize":"",
      "x":550,
      "y":600,
      "wires":[
         [
            "f43f348e.8c6598",
            "5de76388.e0ec6c"
         ]
      ]
   },
   {
      "id":"5de76388.e0ec6c",
      "type":"debug",
      "z":"697662fa.f6378c",
      "g":"6751a745.1161a8",
      "name":"",
      "active":true,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"false",
      "statusVal":"",
      "statusType":"auto",
      "x":750,
      "y":660,
      "wires":[
         
      ]
   },
   {
      "id":"52f31d0c.92b8c4",
      "type":"comment",
      "z":"697662fa.f6378c",
      "g":"e60e8c14.57c3d",
      "name":"test",
      "info":"",
      "x":490,
      "y":800,
      "wires":[
         
      ]
   },
   {
      "id":"88727709.7991b8",
      "type":"mqtt in",
      "z":"697662fa.f6378c",
      "g":"315930f9.f44c9",
      "name":"",
      "topic":"ie/d/j/simatic/v1/#",
      "qos":"2",
      "datatype":"json",
      "broker":"310e5351.87c53c",
      "x":240,
      "y":260,
      "wires":[
         [
            "2d07e65f.a11eea"
         ]
      ]
   },
   {
      "id":"8a12832e.7b065",
      "type":"comment",
      "z":"697662fa.f6378c",
      "g":"315930f9.f44c9",
      "name":"Get tags values and insert in global idValueMap and IDTimestampMap",
      "info":"",
      "x":530,
      "y":220,
      "wires":[
         
      ]
   },
   {
      "id":"2d07e65f.a11eea",
      "type":"function",
      "z":"697662fa.f6378c",
      "g":"315930f9.f44c9",
      "name":"assign ID - Value ",
      "func":"/*################################# \n    Init Variables\n#################################*/\nlet nameIDMap = global.get(\"NameIDMap\");      \nlet idValueMap = global.get(\"IDValueMap\") || new Map();  \nlet timestampMap = global.get(\"IDTimestampMap\") || new Map();\n\n\n/*################################# \n    Parse payload and store id and value to the idValueMap\n#################################*/  \nlet m= msg.payload;\n\nif(m.vals != undefined)\n{\n    //write the recieved Values into the Map (key = id)\n    m.vals.forEach(value => {\n        idValueMap.set(value.id, value.val);\n        timestampMap.set(value.id,value.ts);\n    });\n}\n\n/*################################# \n    update flow maps\n#################################*/  \nglobal.set(\"IDValueMap\", idValueMap);\nglobal.set(\"IDTimestampMap\", timestampMap);\n\nreturn msg;\n\n",
      "outputs":1,
      "noerr":0,
      "initialize":"",
      "finalize":"",
      "x":550,
      "y":260,
      "wires":[
         [
            "4c987d7.a281784"
         ]
      ]
   },
   {
      "id":"4c987d7.a281784",
      "type":"debug",
      "z":"697662fa.f6378c",
      "g":"315930f9.f44c9",
      "name":"",
      "active":false,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"payload",
      "targetType":"msg",
      "statusVal":"",
      "statusType":"auto",
      "x":870,
      "y":260,
      "wires":[
         
      ]
   },
   {
      "id":"8a1a2571.71dd98",
      "type":"inject",
      "z":"697662fa.f6378c",
      "g":"4835363e.32b548",
      "name":"reset",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"",
      "payload":"\"\"",
      "payloadType":"str",
      "x":230,
      "y":400,
      "wires":[
         [
            "756577bc.2a2b78",
            "fd523445.63f038"
         ]
      ]
   },
   {
      "id":"55f8dfec.1c44b",
      "type":"inject",
      "z":"697662fa.f6378c",
      "g":"4835363e.32b548",
      "name":"set",
      "props":[
         {
            "p":"payload"
         },
         {
            "p":"topic",
            "vt":"str"
         }
      ],
      "repeat":"",
      "crontab":"",
      "once":false,
      "onceDelay":0.1,
      "topic":"",
      "payload":"{\"seq\":3,\"connections\":[{\"name\":\"OPCUA\",\"type\":\"OPCUA\",\"dataPoints\":[{\"name\":\"default\",\"topic\":\"ie/d/j/simatic/v1/opcua1/dp/r/OPCUA/default\",\"pubTopic\":\"ie/d/j/simatic/v1/opcua1/dp/w\",\"publishType\":\"bulk\",\"dataPointDefinitions\":[{\"name\":\"ProductionQuality\",\"id\":\"501\",\"dataType\":\"Real\"},{\"name\":\"test\",\"id\":\"502\",\"dataType\":\"Int\"}]}]}]}",
      "payloadType":"json",
      "x":230,
      "y":460,
      "wires":[
         [
            "fd523445.63f038",
            "756577bc.2a2b78"
         ]
      ]
   },
   {
      "id":"fd523445.63f038",
      "type":"debug",
      "z":"697662fa.f6378c",
      "g":"4835363e.32b548",
      "name":"",
      "active":false,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"false",
      "statusVal":"",
      "statusType":"auto",
      "x":870,
      "y":460,
      "wires":[
         
      ]
   },
   {
      "id":"756577bc.2a2b78",
      "type":"mqtt out",
      "z":"697662fa.f6378c",
      "g":"4835363e.32b548",
      "name":"",
      "topic":"ie/m/j/simatic/v1/opcua1/dp",
      "qos":"2",
      "retain":"true",
      "broker":"310e5351.87c53c",
      "x":840,
      "y":400,
      "wires":[
         
      ]
   },
   {
      "id":"a9bf7e43.6733f",
      "type":"comment",
      "z":"697662fa.f6378c",
      "g":"4835363e.32b548",
      "name":"Set metadata",
      "info":"",
      "x":550,
      "y":360,
      "wires":[
         
      ]
   },
   {
      "id":"4085c35c.51955c",
      "type":"comment",
      "z":"697662fa.f6378c",
      "g":"6751a745.1161a8",
      "name":"get values, calculate KPI and publish",
      "info":"",
      "x":540,
      "y":560,
      "wires":[
         
      ]
   },
   {
      "id":"496a05a0.32a08c",
      "type":"mqtt in",
      "z":"697662fa.f6378c",
      "g":"e60e8c14.57c3d",
      "name":"",
      "topic":"ie/d/j/simatic/v1/opcua1/dp/r",
      "qos":"2",
      "datatype":"auto",
      "broker":"310e5351.87c53c",
      "x":300,
      "y":840,
      "wires":[
         [
            "ea095553.9c90e8"
         ]
      ]
   },
   {
      "id":"ea095553.9c90e8",
      "type":"debug",
      "z":"697662fa.f6378c",
      "g":"e60e8c14.57c3d",
      "name":"",
      "active":false,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"false",
      "statusVal":"",
      "statusType":"auto",
      "x":650,
      "y":840,
      "wires":[
         
      ]
   },
   {
      "id":"310e5351.87c53c",
      "type":"mqtt-broker",
      "name":"",
      "broker":"ie-databus",
      "port":"1883",
      "clientid":"",
      "usetls":false,
      "compatmode":false,
      "keepalive":"60",
      "cleansession":true,
      "birthTopic":"",
      "birthQos":"0",
      "birthPayload":"",
      "closeTopic":"",
      "closeQos":"0",
      "closePayload":"",
      "willTopic":"",
      "willQos":"0",
      "willPayload":""
   }
]
